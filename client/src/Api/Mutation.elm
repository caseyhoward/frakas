-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Mutation exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


createGame : SelectionSet String RootMutation
createGame =
    Object.selectionForField "String" "createGame" [] Decode.string


type alias CreateMapRequiredArguments =
    { map : Api.InputObject.MapInput }


createMap : CreateMapRequiredArguments -> SelectionSet decodesTo Api.Object.Map -> SelectionSet decodesTo RootMutation
createMap requiredArgs object_ =
    Object.selectionForCompositeField "createMap" [ Argument.required "map" requiredArgs.map Api.InputObject.encodeMapInput ] object_ identity


type alias JoinGameRequiredArguments =
    { joinGameToken : String }


joinGame : JoinGameRequiredArguments -> SelectionSet String RootMutation
joinGame requiredArgs =
    Object.selectionForField "String" "joinGame" [ Argument.required "joinGameToken" requiredArgs.joinGameToken Encode.string ] Decode.string


type alias RemovePlayerRequiredArguments =
    { playerToken : String
    , playerId : String
    }


removePlayer : RemovePlayerRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> SelectionSet decodesTo RootMutation
removePlayer requiredArgs object_ =
    Object.selectionForCompositeField "removePlayer" [ Argument.required "playerToken" requiredArgs.playerToken Encode.string, Argument.required "playerId" requiredArgs.playerId Encode.string ] object_ identity


type alias SaveGameRequiredArguments =
    { playerToken : String
    , game : Api.InputObject.GameInput
    }


saveGame : SaveGameRequiredArguments -> SelectionSet Bool RootMutation
saveGame requiredArgs =
    Object.selectionForField "Bool" "saveGame" [ Argument.required "playerToken" requiredArgs.playerToken Encode.string, Argument.required "game" requiredArgs.game Api.InputObject.encodeGameInput ] Decode.bool


type alias StartGameRequiredArguments =
    { playerToken : String }


startGame : StartGameRequiredArguments -> SelectionSet Bool RootMutation
startGame requiredArgs =
    Object.selectionForField "Bool" "startGame" [ Argument.required "playerToken" requiredArgs.playerToken Encode.string ] Decode.bool


type alias UpdateGameMapRequiredArguments =
    { playerToken : String
    , mapId : String
    , mapIdType : String
    }


updateGameMap : UpdateGameMapRequiredArguments -> SelectionSet Bool RootMutation
updateGameMap requiredArgs =
    Object.selectionForField "Bool" "updateGameMap" [ Argument.required "playerToken" requiredArgs.playerToken Encode.string, Argument.required "mapId" requiredArgs.mapId Encode.string, Argument.required "mapIdType" requiredArgs.mapIdType Encode.string ] Decode.bool


type alias UpdateGamePlayerNameRequiredArguments =
    { name : String
    , playerToken : String
    }


updateGamePlayerName : UpdateGamePlayerNameRequiredArguments -> SelectionSet Bool RootMutation
updateGamePlayerName requiredArgs =
    Object.selectionForField "Bool" "updateGamePlayerName" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "playerToken" requiredArgs.playerToken Encode.string ] Decode.bool


type alias UpdateGamePlayerColorRequiredArguments =
    { color : Api.InputObject.ColorInput
    , playerToken : String
    }


updateGamePlayerColor : UpdateGamePlayerColorRequiredArguments -> SelectionSet Bool RootMutation
updateGamePlayerColor requiredArgs =
    Object.selectionForField "Bool" "updateGamePlayerColor" [ Argument.required "color" requiredArgs.color Api.InputObject.encodeColorInput, Argument.required "playerToken" requiredArgs.playerToken Encode.string ] Decode.bool


type alias UpdateGamePlayerRequiredArguments =
    { playerToken : String
    , color : Api.InputObject.ColorInput
    , name : String
    }


updateGamePlayer : UpdateGamePlayerRequiredArguments -> SelectionSet Bool RootMutation
updateGamePlayer requiredArgs =
    Object.selectionForField "Bool" "updateGamePlayer" [ Argument.required "playerToken" requiredArgs.playerToken Encode.string, Argument.required "color" requiredArgs.color Api.InputObject.encodeColorInput, Argument.required "name" requiredArgs.name Encode.string ] Decode.bool
